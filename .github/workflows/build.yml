name: Build OnePlus SM8550 Kernel

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Free up disk space
      run: |
        echo "==> Before cleanup:"
        df -h
        
        # 删除不需要的软件和文件
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf /usr/local/graalvm/
        sudo rm -rf /usr/local/share/chromium
        sudo rm -rf /usr/local/lib/node_modules
        
        # 清理 apt 缓存
        sudo apt-get clean
        
        # 清理 Docker
        docker system prune -af || true
        
        echo "==> After cleanup:"
        df -h
        
    - name: Setup build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          bc \
          bison \
          flex \
          libssl-dev \
          libelf-dev \
          zip \
          python3 \
          git
        
        # 立即清理 apt 缓存
        sudo apt-get clean
        
    - name: Setup work directory
      run: |
        mkdir -p ~/kernel
        cd ~/kernel
        echo "WORK_DIR=$HOME/kernel" >> $GITHUB_ENV
        
    - name: Clone and setup clang toolchain
      run: |
        cd ~/kernel
        echo "==> Cloning Clang toolchain..."
        git clone --depth=1 --single-branch https://github.com/inferno0230/clang.git clang-toolchain
        
        # 立即删除 .git 目录节省空间
        rm -rf clang-toolchain/.git
        
        echo "==> Disk usage after clang:"
        df -h
        
    - name: Clone kernel sources (minimal)
      run: |
        cd ~/kernel
        
        # 设置git配置
        git config --global advice.detachedHead false
        
        echo "==> Cloning kernel source..."
        git clone --depth=1 --single-branch --no-tags \
          https://github.com/AlphaDroid-devices/kernel_oneplus_sm8550.git sm8550
        rm -rf sm8550/.git
        
        echo "==> Cloning modules source..."
        git clone --depth=1 --single-branch --no-tags \
          https://github.com/AlphaDroid-devices/kernel_oneplus_sm8550-modules.git sm8550-modules
        rm -rf sm8550-modules/.git
        
        echo "==> Cloning devicetrees source..."
        git clone --depth=1 --single-branch --no-tags \
          https://github.com/AlphaDroid-devices/kernel_oneplus_sm8550-devicetrees.git sm8550-devicetrees
        rm -rf sm8550-devicetrees/.git
        
        echo "==> Disk usage after sources:"
        df -h
        
    - name: Setup build environment
      run: |
        cd ~/kernel
        echo "PATH=$HOME/kernel/clang-toolchain/bin:$PATH" >> $GITHUB_ENV
        echo "ARCH=arm64" >> $GITHUB_ENV
        echo "SUBARCH=arm64" >> $GITHUB_ENV
        echo "CLANG_TRIPLE=aarch64-linux-gnu-" >> $GITHUB_ENV
        echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
        echo "CROSS_COMPILE_COMPAT=arm-linux-gnueabi-" >> $GITHUB_ENV
        
    - name: Build kernel (optimized)
      run: |
        cd ~/kernel
        
        KERNEL_SOURCE_DIR="$HOME/kernel/sm8550"
        OUTPUT_DIR="$HOME/kernel/out"
        
        # 创建输出目录
        mkdir -p "$OUTPUT_DIR"
        
        echo "==> Disk before build:"
        df -h
        
        # Make参数
        KBUILD_ARGS=(
          "LLVM=1"
          "LLVM_IAS=1" 
          "CC=clang"
        )
        
        # 配置文件
        DEFCONFIG_FILES="gki_defconfig vendor/kalama_GKI.config vendor/oplus/kalama_GKI.config vendor/debugfs.config vendor/oplus/aston.config"
        
        echo "==> Configuring kernel..."
        make -C "${KERNEL_SOURCE_DIR}" O="${OUTPUT_DIR}" "${KBUILD_ARGS[@]}" $DEFCONFIG_FILES
        
        # 禁用 BTF 以节省空间和时间
        sed -i 's/CONFIG_DEBUG_INFO_BTF=y/# CONFIG_DEBUG_INFO_BTF is not set/' "${OUTPUT_DIR}/.config"
        
        make -C "${KERNEL_SOURCE_DIR}" O="${OUTPUT_DIR}" "${KBUILD_ARGS[@]}" olddefconfig
        
        echo "==> Building kernel (using 2 cores to save memory)..."
        make -C "${KERNEL_SOURCE_DIR}" O="${OUTPUT_DIR}" -j2 "${KBUILD_ARGS[@]}"
        
        echo "==> Cleaning intermediate files..."
        find "$OUTPUT_DIR" -name "*.o" -delete 2>/dev/null || true
        find "$OUTPUT_DIR" -name "*.cmd" -delete 2>/dev/null || true
        find "$OUTPUT_DIR" -name ".*.d" -delete 2>/dev/null || true
        find "$OUTPUT_DIR" -name "*.mod" -delete 2>/dev/null || true
        
        echo "==> Disk after build:"
        df -h
        
    - name: Create AnyKernel3 package
      run: |
        cd ~/kernel
        
        OUTPUT_DIR="$HOME/kernel/out"
        FINAL_PRODUCT_DIR="$HOME/kernel/anykernel_out"
        KERNEL_IMAGE="$OUTPUT_DIR/arch/arm64/boot/Image"
        
        if [ ! -f "$KERNEL_IMAGE" ]; then
          echo "ERROR: Kernel Image not found"
          exit 1
        fi
        
        # 下载 AnyKernel3 模板
        echo "==> Downloading AnyKernel3..."
        git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git
        rm -rf AnyKernel3/.git
        
        # 创建包目录
        mkdir -p "$FINAL_PRODUCT_DIR/anykernel3"
        cp -r AnyKernel3/* "$FINAL_PRODUCT_DIR/anykernel3/"
        cp "$KERNEL_IMAGE" "$FINAL_PRODUCT_DIR/anykernel3/"
        
        # 创建 anykernel.sh
        cat > "$FINAL_PRODUCT_DIR/anykernel3/anykernel.sh" << 'EOF'
#!/sbin/sh
## AnyKernel setup
properties() { '
kernel.string=AlphaDroid Kernel for OnePlus 12R
do.devicecheck=1
do.modules=0
do.systemless=1
do.cleanup=1
do.cleanuponabort=0
device.name1=aston
device.name2=OnePlus12R
device.name3=OP5D5DL1
supported.versions=
supported.patchlevels=
'; }

block=/dev/block/bootdevice/by-name/boot;
is_slot_device=1;
ramdisk_compression=auto;
patch_vbmeta_flag=auto;

## AnyKernel methods
. tools/ak3-core.sh;

## AnyKernel install
dump_boot;
write_boot;
EOF
        
        # 创建 zip 包
        cd "$FINAL_PRODUCT_DIR/anykernel3"
        BUILD_DATE=$(date +"%Y%m%d-%H%M")
        ZIP_NAME="AlphaDroid-Kernel-${BUILD_DATE}.zip"
        zip -r9 "../$ZIP_NAME" * -x "*.git*" "*placeholder"
        
        echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV
        echo "ZIP_PATH=$FINAL_PRODUCT_DIR/$ZIP_NAME" >> $GITHUB_ENV
        
        echo "==> Build completed!"
        echo "Package: $ZIP_NAME"
        echo "Size: $(du -h "$FINAL_PRODUCT_DIR/$ZIP_NAME" | cut -f1)"
        
    - name: Upload kernel
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ZIP_NAME }}
        path: ${{ env.ZIP_PATH }}
        retention-days: 7
