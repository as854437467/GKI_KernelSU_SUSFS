name: 合并后的内核构建
permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:

jobs:
  build-kernel:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - sub_level: "74"
            os_patch_level: "2023-01"
          - sub_level: "94"
            os_patch_level: "2023-05"
          - sub_level: "104"
            os_patch_level: "2023-07"
          - sub_level: "123"
            os_patch_level: "2023-11"
          - sub_level: "148"
            os_patch_level: "2024-05"
          - sub_level: "167"
            os_patch_level: "2024-11"
          - sub_level: "170"
            os_patch_level: "2025-01"
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
      - name: Maximize Build Space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          remove-large-packages: 'true'
          remove-swapfile: 'true'
          remove-cached-tools: 'false'
          verbose: 'true'

      - name: 设定 CONFIG 环境变量
        run: |
          CONFIG="android13-5.15"
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          echo "CONFIG set to: $CONFIG"

      - name: 安装 ccache
        run: sudo apt update && sudo apt upgrade -y && sudo apt install -y ccache python3 git curl

      - name: 配置 ccache
        run: |
          mkdir -p ~/.cache/bazel
          ccache --version
          ccache --max-size=2G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

      - name: 从缓存中还原ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: android13-5.15-ccache-${{ github.sha }}
          restore-keys: |
            android13-5.15-ccache-

      - name: Clone clang toolchain
        run: |
          echo "==> Cloning Clang toolchain..."
          git clone --depth=1 --single-branch https://github.com/inferno0230/clang.git clang-toolchain
          rm -rf clang-toolchain/.git
          echo "==> Clang toolchain size:"
          du -sh clang-toolchain

      - name: 设置环境变量
        run: |
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV
          echo "PATH=$GITHUB_WORKSPACE/clang-toolchain/bin:$PATH" >> $GITHUB_ENV
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "SUBARCH=arm64" >> $GITHUB_ENV
          echo "CLANG_TRIPLE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "CROSS_COMPILE_COMPAT=arm-linux-gnueabi-" >> $GITHUB_ENV

      - name: 密钥设置——已经过mkppk修改
        env:
          BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
        run: |
            openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 > ./kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
            echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV

      - name: 安装仓库
        run: |
          mkdir -p ./git-repo
          curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: 克隆 AnyKernel3 和其他依赖项
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-android13-5.15"
          echo "Using branch for SUSFS: $SUSFS_BRANCH"
          git clone https://github.com/WildPlusKernel/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://github.com/ShirkNeko/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/WildPlusKernel/kernel_patches.git
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          
      - name: 设置 CONFIG 环境变量
        run: |
          CONFIG="android13-5.15"
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          echo "CONFIG set to: $CONFIG"

      - name: Clone kernel sources
        run: |
          git config --global advice.detachedHead false
          git config --global init.defaultBranch main
          echo "==> Shallow fetch specific commit..."
          git init $CONFIG
          cd $CONFIG
          git remote add origin https://github.com/AlphaDroid-devices/kernel_oneplus_sm8550.git
          git fetch --depth=1 origin 71ded832fb2c52e35ab6b1d2a07d8008ffbcaaf4
          git checkout FETCH_HEAD
          rm -rf KernelSU
          rm -rf drivers/kernelsu
          sed -i '/kernelsu/d' drivers/Makefile
          sed -i '/drivers\/kernelsu\/Kconfig/d' drivers/Kconfig
          cd ..
          rm -rf $CONFIG/.git
          echo "==> Cloning modules source (2/3)..."
          git clone --depth=1 --single-branch --no-tags \
            https://github.com/AlphaDroid-devices/kernel_oneplus_sm8550-modules.git sm8550-modules
          rm -rf sm8550-modules/.git
          echo "==> Cloning devicetrees source (3/3)..."
          git clone --depth=1 --single-branch --no-tags \
            https://github.com/AlphaDroid-devices/kernel_oneplus_sm8550-devicetrees.git sm8550-devicetrees
          rm -rf sm8550-devicetrees/.git

      - name: 确定 KernelSU 的分支
        run: |
          echo "BRANCH=-s susfs-test" >> $GITHUB_ENV

      - name: 添加 KernelSU
        run: |
          echo "更改为配置目录: $CONFIG..."
          cd "$CONFIG"
          echo "Adding KernelSU SukiSU..."
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash $BRANCH

      - name: 为 KernelSU 变体安装 SUSFS 补丁
        run: |
          echo "更改为配置目录: $CONFIG..."
          cd "$CONFIG"
          echo "Applying SUSFS patches..."
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android13-5.15.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          echo "Applying SUSFS patches for SukiSU..."
          cd ./KernelSU
          echo "Applying SukiSU specific SUSFS patch..."
          cd ../common
          FORMATTED_BRANCH="android13-5.15"
          patch -p1 --fuzz=3 < 50_add_susfs_in_gki-android13-5.15.patch || true
  
      - name: 应用新的HOOKS补丁
        run: |
          echo "更改为配置目录: $CONFIG..."
          cd "$CONFIG/common"
          echo "Applying hooks for SukiSU..."
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          patch -p1 -F 3 < syscall_hooks.patch

      - name: 复制源文件 & 应用LZ4KD & ZSTDN补丁
        run: |
          echo "更改为配置目录: $CONFIG..."
          cd "$CONFIG/common"
          cp -r ../../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux/
          cp -r ../../SukiSU_patch/other/zram/lz4k/lib/* ./lib/
          cp -r ../../SukiSU_patch/other/zram/lz4k/crypto/* ./crypto/
          cp -r ../../SukiSU_patch/other/zram/lz4k_oplus ./lib/
          cp ../../SukiSU_patch/other/zram/zram_patch/5.15/lz4kd.patch ./
          echo "正在打lz4kd补丁"
          patch -p1 -F 3 < lz4kd.patch || true
          echo '完成LZ4KD补丁'
          cp ../../SukiSU_patch/other/zram/zram_patch/5.15/lz4k_oplus.patch ./
          echo "正在打lz4k_oplus补丁"
          patch -p1 -F 3 < lz4k_oplus.patch || true
          echo '完成lz4k_oplus补丁'

      - name: 应用隐藏某特征的补丁
        run: |
          echo "更改为配置目录: $CONFIG..."
          cd "$CONFIG/common"
          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch

      - name: LZ4KD & Lz4k_oplus配置
        run: |
          set -x
          set -e
          echo "写入LZ4KD&ZSTDN config依赖"
          CONFIG_FILE="$CONFIG/common/arch/arm64/configs/gki_defconfig"
          if grep -q "CONFIG_ZSMALLOC" -- "$CONFIG_FILE"; then
              echo "提示：文件 $CONFIG_FILE 包含字符串 CONFIG_ZSMALLOC。"
              sed -i 's/CONFIG_ZSMALLOC=m/CONFIG_ZSMALLOC=y/g' "$CONFIG_FILE"
          else
              echo "警告：文件 $CONFIG_FILE 不包含字符串 CONFIG_ZSMALLOC。"
              echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
          fi
          sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' "$CONFIG_FILE"
          if grep -q "CONFIG_ZSMALLOC=y" "$CONFIG_FILE" && grep -q "CONFIG_ZRAM=y" "$CONFIG_FILE"; then
            echo "CONFIG_CRYPTO_LZ4HC=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4K=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_842=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4K_OPLUS=y" >> "$CONFIG_FILE"
            echo "CONFIG_ZRAM_WRITEBACK=y" >> "$CONFIG_FILE"
          fi

      - name: 添加SUSFS配置设置
        run: |
          echo "更改为配置目录: $CONFIG..."
          cd "$CONFIG"
          echo "Adding configuration settings to gki_defconfig..."
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TMPFS_XATTR=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_BIC=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_HTCP=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: 配置内核名称
        run: |
          echo "更改为配置目录: $CONFIG..."
          cd "$CONFIG"
          echo "版本号为空，使用默认值"
          sed -i '$s|echo "\$res"|echo "\$res-zakozakoooooo-1145141919"|' ./common/scripts/setlocalversion
          CURRENT_TIME=$(date -u +"%a %b %d %H:%M:%S UTC %Y")
          echo "CURRENT_TIME=$CURRENT_TIME"
          perl -pi -e "s{UTS_VERSION=\"\\\$\(echo \\\$UTS_VERSION \\\$CONFIG_FLAGS \\\$TIMESTAMP \\| cut -b -\\\$UTS_LEN\)\"}{UTS_VERSION=\"#1 SMP PREEMPT $CURRENT_TIME\"}" ./common/scripts/mkcompile_h
          if [ -f "build/build.sh" ]; then
            sed -i 's/-dirty//' ./common/scripts/setlocalversion
          else
            sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' ./common/BUILD.bazel
            rm -rf ./common/android/abi_gki_protected_exports_*
            sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl
          fi

      - name: Build with retry
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 30
          max_attempts: 3
          retry_on: timeout
          command: |
            set -e
            set -x
            cd "$CONFIG"
            sed -i 's/BUILD_SYSTEM_DLKM=1/BUILD_SYSTEM_DLKM=0/' common/build.config.gki.aarch64
            sed -i '/MODULES_ORDER=android\/gki_aarch64_modules/d' common/build.config.gki.aarch64
            sed -i '/KMI_SYMBOL_LIST_STRICT_MODE/d' common/build.config.gki.aarch64
            echo "Building the kernel..."
            if [ -f "build/build.sh" ]; then
              LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh CC="/usr/bin/ccache clang" || exit 1
            else
              tools/bazel build --disk_cache=/home/runner/.cache/bazel --config=fast --lto=thin //common:kernel_aarch64_dist || exit 1
            fi
            ccache --show-stats
            
      - name: 创建Bootimgs文件夹并复制镜像
        run: |
          echo "更改为配置目录: $CONFIG..."
          mkdir bootimgs
          echo "Creating bootimgs folder and copying images..."
          cp ./$CONFIG/out/android13-5.15/dist/Image ./bootimgs
          cp ./$CONFIG/out/android13-5.15/dist/Image.lz4 ./bootimgs
          cp ./$CONFIG/out/android13-5.15/dist/Image ./
          cp ./$CONFIG/out/android13-5.15/dist/Image.lz4 ./
          gzip -n -k -f -9 ./Image > ./Image.gz

      - name: 创建不同格式的ZIP文件
        run: |
          echo "Creating zip files for all formats..."
          cd ./AnyKernel3
          ZIP_NAME="android13-5.15-AnyKernel3.zip"
          echo "Creating zip file: $ZIP_NAME..."
          mv ../Image ./Image
          zip -r "../$ZIP_NAME" ./*
          rm ./Image
          ZIP_NAME="android13-5.15-AnyKernel3-lz4.zip"
          echo "Creating zip file: $ZIP_NAME..."
          mv ../Image.lz4 ./Image.lz4
          zip -r "../$ZIP_NAME" ./*
          rm ./Image.lz4
          ZIP_NAME="android13-5.15-AnyKernel3-gz.zip"
          echo "Creating zip file: $ZIP_NAME..."
          mv ../Image.gz ./Image.gz
          zip -r "../$ZIP_NAME" ./*
          rm ./Image.gz

      - name: 运行boot镜像 android13 编译脚本
        run: |
          cd bootimgs
          echo "Building Image.gz"
          gzip -n -k -f -9 ./Image > ./Image.gz
          echo "Building boot.img"
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot.img ../android13-5-boot.img
          echo "Building boot-gz.img"
          $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-gz.img ../android13-5-boot-gz.img
          echo "Building boot-lz4.img"
          $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot-lz4.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-lz4.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-lz4.img ../android13-5-boot-lz4.img

      - name: 上传编译资产
        uses: actions/upload-artifact@v4
        with:
          name: SukiSU_kernel-${{ env.CONFIG }}
          path: |
            *AnyKernel3.zip
            *.img 
